{"type": "bundle","id": "bundle--ad5f3bce-004b-417e-899d-392f8591ab55","spec_version": "2.0","objects":[{
	"_id": {
		"$oid": "6033e56e06763f967bba75ec"
	},
	"id": "attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8",
	"name": ".bash_profile and .bashrc",
	"external_references": [
		{
			"source_name": "mitre-attack",
			"external_id": "T1156",
			"url": "https://attack.mitre.org/techniques/T1156"
		},
		{
			"url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
			"description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.",
			"source_name": "amnesia malware"
		}
	],
	"revoked": true,
	"type": "attack-pattern",
	"modified": "2020-01-24T14:14:05.452Z",
	"created": "2017-12-14T16:46:06.044Z"
},
{
	"_id": {
		"$oid": "6033e56e06763f967bba75ed"
	},
	"external_references": [
		{
			"source_name": "mitre-attack",
			"external_id": "T1546.004",
			"url": "https://attack.mitre.org/techniques/T1546/004"
		},
		{
			"url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
			"description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.",
			"source_name": "amnesia malware"
		}
	],
	"object_marking_refs": [
		"marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
	],
	"created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
	"name": ".bash_profile and .bashrc",
	"description": "Adversaries may establish persistence by executing malicious content triggered by a userâ€™s shell. <code>~/.bash_profile</code> and <code>~/.bashrc</code> are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly.\n\n<code>~/.bash_profile</code> is executed for login shells and <code>~/.bashrc</code> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <code>~/.bash_profile</code> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <code>~/.bashrc</code> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.\n\nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <code>~/.bash_profile</code> each time instead of <code>~/.bashrc</code>.\n\nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware)",
	"id": "attack-pattern--b63a34e8-0a61-4c97-a23b-bf8a2ed812e2",
	"type": "attack-pattern",
	"kill_chain_phases": [
		{
			"kill_chain_name": "mitre-attack",
			"phase_name": "privilege-escalation"
		},
		{
			"kill_chain_name": "mitre-attack",
			"phase_name": "persistence"
		}
	],
	"modified": "2020-03-24T16:28:04.990Z",
	"created": "2020-01-24T14:13:45.936Z",
	"x_mitre_version": "1.0",
	"x_mitre_is_subtechnique": true,
	"x_mitre_permissions_required": [
		"User",
		"Administrator"
	],
	"x_mitre_detection": "While users may customize their <code>~/.bashrc</code> and <code>~/.bash_profile</code> files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.",
	"x_mitre_data_sources": [
		"Process use of network",
		"Process command-line parameters",
		"Process monitoring",
		"File monitoring"
	],
	"x_mitre_platforms": [
		"Linux",
		"macOS"
	]
},
{
	"_id": {
		"$oid": "6033e56e06763f967bba75ee"
	},
	"external_references": [
		{
			"url": "https://attack.mitre.org/techniques/T1003/008",
			"external_id": "T1003.008",
			"source_name": "mitre-attack"
		},
		{
			"description": "The Linux Documentation Project. (n.d.). Linux Password and Shadow File Formats. Retrieved February 19, 2020.",
			"url": "https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html",
			"source_name": "Linux Password and Shadow File Formats"
		},
		{
			"description": "Vivek Gite. (2014, September 17). Linux Password Cracking: Explain unshadow and john Commands (John the Ripper Tool). Retrieved February 19, 2020.",
			"url": "https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/",
			"source_name": "nixCraft - John the Ripper"
		}
	],
	"object_marking_refs": [
		"marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
	],
	"created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
	"name": "/etc/passwd and /etc/shadow",
	"description": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>\n",
	"id": "attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4",
	"type": "attack-pattern",
	"kill_chain_phases": [
		{
			"kill_chain_name": "mitre-attack",
			"phase_name": "credential-access"
		}
	],
	"modified": "2020-03-20T15:56:55.022Z",
	"created": "2020-02-11T18:46:56.263Z",
	"x_mitre_detection": "The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access <code>/etc/passwd</code> and <code>/etc/shadow</code>, alerting on the pid, process name, and arguments of such programs.",
	"x_mitre_permissions_required": [
		"root"
	],
	"x_mitre_version": "1.0",
	"x_mitre_is_subtechnique": true,
	"x_mitre_platforms": [
		"Linux"
	]
},
{
	"_id": {
		"$oid": "6033e56e06763f967bba75ef"
	},
	"external_references": [
		{
			"source_name": "mitre-attack",
			"external_id": "T1557.002",
			"url": "https://attack.mitre.org/techniques/T1557/002"
		},
		{
			"source_name": "RFC826 ARP",
			"url": "https://tools.ietf.org/html/rfc826",
			"description": "Plummer, D. (1982, November). An Ethernet Address Resolution Protocol. Retrieved October 15, 2020."
		},
		{
			"source_name": "Sans ARP Spoofing Aug 2003",
			"url": "https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411",
			"description": "Siles, R. (2003, August). Real World ARP Spoofing. Retrieved October 15, 2020."
		},
		{
			"source_name": "Cylance Cleaver",
			"description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.",
			"url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf"
		}
	],
	"object_marking_refs": [
		"marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
	],
	"created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
	"name": "ARP Cache Poisoning",
	"description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as [Network Sniffing](https://attack.mitre.org/techniques/T1040) or [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002).\n\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\n\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\n\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\n\nAdversaries may use ARP cache poisoning as a mea